/*******************************************************************************
 * Copyright (c) 2014 IBM Corporation, BestSolution.at and others.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v.2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 * 	   IBM Corporation - initial API
 *     Tom Schindl<tom.schindl@bestsolution.at> - initial API and implementation
 *******************************************************************************/
package org.eclipse.swt.widgets;


import java.util.ArrayList;

import javafx.application.Platform;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.control.CheckMenuItem;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.RadioMenuItem;
import javafx.scene.control.Separator;
import javafx.scene.control.SeparatorMenuItem;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCharacterCombination;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCodeCombination;
import javafx.scene.input.KeyCombination;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ArmListener;
import org.eclipse.swt.events.HelpListener;
import org.eclipse.swt.events.MenuEvent;
import org.eclipse.swt.events.MenuListener;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.internal.Util;

public class MenuItem extends Item {
	private Menu parent;
	private javafx.scene.control.MenuItem nativeItem;
	private Menu menu;
	private int accelerator;
	private static EventHandler<ActionEvent> SELECTION_HANDLER;
	
	public MenuItem (Menu parent, int style) {
		super(parent, style);
		this.parent = parent;
		parent.internal_addItem(this);
		armInit();
	}
	
	public MenuItem (Menu parent, int style,int index) {
		super(parent, style);
		this.parent = parent;
		parent.internal_addItem(this,index);
		armInit();
	}
	
	private void armInit() {
		EventHandler<Event> eventHandler = new EventHandler<Event>() {
			private boolean initDone;
			@Override
			public void handle(Event event) {
				if( initDone ) {
					return;
				}
				initDone = true;
				final Node node = internal_getNativeObject().impl_styleableGetNode();
				if( node != null ) {
					node.focusedProperty().addListener(new InvalidationListener() {
						
						@Override
						public void invalidated(Observable observable) {
							if( node.isFocused() ) {
								internal_sendEvent(SWT.Arm, new org.eclipse.swt.widgets.Event(), true);	
							}
						}
					});	
				}
			}
		};
		
		
		if( this.parent.internal_getNativeObject() instanceof javafx.scene.control.Menu ) {
			((javafx.scene.control.Menu)this.parent.internal_getNativeObject()).addEventHandler(javafx.scene.control.Menu.ON_SHOWN,eventHandler);			
		} else if( this.parent.internal_getNativeObject() instanceof ContextMenu ) {
			((ContextMenu)this.parent.internal_getNativeObject()).addEventHandler(javafx.scene.control.Menu.ON_SHOWN,eventHandler);
		}
	}
	
	@Override
	protected void initListeners() {
		super.initListeners();
		if( nativeItem != null ) {
			// Radio events are generated by the toggle-group in the menu
			if( (style & SWT.RADIO) != SWT.RADIO ) {
				nativeItem.setOnAction(getSelectionHandler());	
			}
		}
	}
	
	private static EventHandler<ActionEvent> getSelectionHandler() {
		if( SELECTION_HANDLER == null ) {
			SELECTION_HANDLER = new EventHandler<ActionEvent>() {
				
				@Override
				public void handle(ActionEvent event) {
					// TODO Work around for JavaFX bug https://javafx-jira.kenai.com/browse/RT-35401 
					Platform.runLater(new Runnable() {

						@Override
						public void run() {
							org.eclipse.swt.widgets.Event evt = new org.eclipse.swt.widgets.Event();
							MenuItem item = Widget.getWidget(event.getSource());
							if( item != null ) {
								item.internal_sendEvent(SWT.Selection, evt, true);
							}
						}
					});
				}
			};
		}
		return SELECTION_HANDLER;
	}
	
	@Override
	protected Object createWidget() {
		// don't create an item when style is cascade
		if( (style & SWT.PUSH) == SWT.PUSH ) {
			nativeItem = new javafx.scene.control.MenuItem();
		} else if( (style & SWT.CHECK) == SWT.CHECK ) {
			nativeItem = new CheckMenuItem();
		} else if( (style & SWT.RADIO) == SWT.RADIO ) {
			nativeItem = new RadioMenuItem("");
		} else if( (style & SWT.SEPARATOR) == SWT.SEPARATOR ) {
			nativeItem = new SeparatorMenuItem();
		} else {
			nativeItem = new javafx.scene.control.Menu("Placeholder");
		}
		return nativeItem;
	}
	
	@Override
	public javafx.scene.control.MenuItem internal_getNativeObject() {
		return nativeItem;
	}
	
	@Override
	public void setText(String string) {
		super.setText(string);
		if( nativeItem != null ) {
			nativeItem.setText(Util.fixAccelerator(Util.fixMnemonic(string)));	
		}
	}
	
	@Override
	public void setImage(Image image) {
		super.setImage(image);
		if( nativeItem != null ) {
			nativeItem.setGraphic(image == null ? null : new ImageView(image.internal_getImage()));	
		}		
	}
	
	public void setMenu(Menu menu) {
		this.menu = menu;
		this.menu.setParentItem(this);
		parent.internal_menuAttached(this,menu);
		nativeItem = (javafx.scene.control.Menu) menu.internal_getNativeObject();
		
		setText(getText());
		setImage(getImage());
		setEnabled(getEnabled());
		setAccelerator(getAccelerator());
	}
	
	public void addArmListener (ArmListener listener) {
		if (listener == null) error (SWT.ERROR_NULL_ARGUMENT);
		TypedListener typedListener = new TypedListener (listener);
		addListener (SWT.Arm, typedListener);
	}
	
	public void addHelpListener (HelpListener listener) {
		Util.logNotImplemented();
	}
	
	public void addSelectionListener (SelectionListener listener) {
		if (listener == null) error (SWT.ERROR_NULL_ARGUMENT);
		TypedListener typedListener = new TypedListener(listener);
		addListener (SWT.Selection,typedListener);
		addListener (SWT.DefaultSelection,typedListener);
	}
	
	public int getAccelerator () {
		return accelerator;
	}
	
	public boolean getEnabled () {
		return (state & DISABLED) == 0;
	}
	
//	public int getID () {
//		
//	}
//	
	public Menu getMenu () {
		return menu;
	}
	
	public Menu getParent () {
		return parent;
	}
	
	public boolean getSelection () {
		if( nativeItem instanceof CheckMenuItem ) {
			return ((CheckMenuItem) nativeItem).isSelected();
		} else if( nativeItem instanceof RadioMenuItem ) {
			return ((RadioMenuItem) nativeItem).isSelected();
		}
		return false;
	}
//	
//	public boolean isEnabled () {
//		
//	}
//	
	public void removeArmListener (ArmListener listener) {
		
	}
	
	public void removeHelpListener (HelpListener listener) {
		
	}
	
	public void removeSelectionListener (SelectionListener listener) {
		
	}
	
	public void setAccelerator (int accelerator) {
		this.accelerator = accelerator;
		if( nativeItem != null ) {
			if( accelerator != 0 ) {
				int key = accelerator & SWT.KEY_MASK;
				KeyCode k = keyChar(key);
				
				java.util.List<KeyCombination.Modifier> l = new ArrayList<>();
				if( (accelerator & SWT.SHIFT) != 0 ) {
					l.add(KeyCombination.SHIFT_DOWN);
				}
				
				if( (accelerator & SWT.CONTROL) != 0 ) {
					l.add(KeyCombination.CONTROL_DOWN);
				}
				
				if( (accelerator & SWT.ALT) != 0 ) {
					l.add(KeyCombination.ALT_DOWN);
				}
				
				if( (accelerator & SWT.COMMAND) != 0 ) {
					l.add(KeyCombination.META_DOWN);
				}
								
				if( k == null ) {
					for( KeyCode c : KeyCode.values() ) {
						if( c.impl_getCode() == key ) {
							k = c;
							break;
						}
					}
				}
				
				KeyCombination kc;
				if( k != null ) {
					kc = new KeyCodeCombination(k,l.toArray(new KeyCombination.Modifier[0]));
				} else {
					kc = new KeyCharacterCombination(String.valueOf((char)key),l.toArray(new KeyCombination.Modifier[0]));
				}
				
				nativeItem.setAccelerator(kc);
			} else {
				nativeItem.setAccelerator(null);
			}
		}
	}
	
	public void setEnabled (boolean enabled) {
		state |= DISABLED;
		if( nativeItem != null ) {
			nativeItem.setDisable(!enabled);
		}
	}
	
//	public void setID (int id) {
//		
//	}
	
	public void setSelection (boolean selected) {
		if( nativeItem != null)  {
			if(nativeItem instanceof CheckMenuItem) {
				((CheckMenuItem)nativeItem).setSelected(selected);
			} else if( nativeItem instanceof RadioMenuItem ) {
				((RadioMenuItem)nativeItem).setSelected(selected);
			}
		}
	}
	
	@Override
	public void dispose() {
		parent.internal_removeItem(this);
		super.dispose();
	}
	
	static KeyCode keyChar (int key) {
		//TODO - use the NS key constants
		switch (key) {
			case SWT.BS: return KeyCode.BACK_SPACE;
			case SWT.CR: return KeyCode.ENTER; //TODO is the correct??
			case SWT.DEL: return KeyCode.DELETE;
			case SWT.ESC: return KeyCode.ESCAPE;
			case SWT.LF: return KeyCode.ENTER; //TODO is the correct??
			case SWT.TAB: return KeyCode.TAB;
//			case ' ': return OS.kMenuBlankGlyph;
//			case ' ': return OS.kMenuSpaceGlyph;		
			case SWT.ALT: return KeyCode.ALT;
			case SWT.SHIFT: return KeyCode.SHIFT;
			case SWT.CONTROL: return KeyCode.CONTROL;
			case SWT.COMMAND: return KeyCode.COMMAND;
			case SWT.ARROW_UP: return KeyCode.UP;
			case SWT.ARROW_DOWN: return KeyCode.DOWN;
			case SWT.ARROW_LEFT: return KeyCode.LEFT;
			case SWT.ARROW_RIGHT: return KeyCode.RIGHT;
			case SWT.PAGE_UP: return KeyCode.PAGE_UP;
			case SWT.PAGE_DOWN: return KeyCode.PAGE_DOWN;
			case SWT.KEYPAD_CR: return KeyCode.ENTER;
			case SWT.HELP: return KeyCode.HELP;
			case SWT.HOME: return KeyCode.HOME;
			case SWT.END: return KeyCode.END;
//			case SWT.CAPS_LOCK: return ??;
			case SWT.F1: return KeyCode.F1;
			case SWT.F2: return KeyCode.F2;
			case SWT.F3: return KeyCode.F3;
			case SWT.F4: return KeyCode.F4;
			case SWT.F5: return KeyCode.F5;
			case SWT.F6: return KeyCode.F6;
			case SWT.F7: return KeyCode.F7;
			case SWT.F8: return KeyCode.F8;
			case SWT.F9: return KeyCode.F9;
			case SWT.F10: return KeyCode.F10;
			case SWT.F11: return KeyCode.F11;
			case SWT.F12: return KeyCode.F12;
			case SWT.F13: return KeyCode.F13;
			case SWT.F14: return KeyCode.F14;
			case SWT.F15: return KeyCode.F15;
			/*
			* The following lines are intentionally commented.
			*/
//			case SWT.INSERT: return ??;
		}
		return null;
	}
}
