/*******************************************************************************
 * Copyright (c) 2022 BestSolution.at and others.
 *  
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v.2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0.
 *  
 * SPDX-License-Identifier: EPL-2.0
 *  
 * Contributors:
 *     BestSolution.at - initial API and implementation
 *******************************************************************************/
/*
* generated by Xtext
*/
package org.eclipse.fx.code.compensator.hsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartitionsPartitionParserRuleCall_2_0 = (RuleCall)cPartitionsAssignment_2.eContents().get(0);
		private final Assignment cDamagersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDamagersDamagerParserRuleCall_3_0 = (RuleCall)cDamagersAssignment_3.eContents().get(0);
		private final Assignment cPartitionerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPartitionerPartitionerParserRuleCall_4_0 = (RuleCall)cPartitionerAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cForKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContentTypesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContentTypesSTRINGTerminalRuleCall_7_0 = (RuleCall)cContentTypesAssignment_7.eContents().get(0);
		
		//Model:
		//	name=ID "{" partitions+=Partition+ damagers+=Damager+ partitioner=Partitioner "}" "for" contentTypes+=STRING+;
		public ParserRule getRule() { return rule; }

		//name=ID "{" partitions+=Partition+ damagers+=Damager+ partitioner=Partitioner "}" "for" contentTypes+=STRING+
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//partitions+=Partition+
		public Assignment getPartitionsAssignment_2() { return cPartitionsAssignment_2; }

		//Partition
		public RuleCall getPartitionsPartitionParserRuleCall_2_0() { return cPartitionsPartitionParserRuleCall_2_0; }

		//damagers+=Damager+
		public Assignment getDamagersAssignment_3() { return cDamagersAssignment_3; }

		//Damager
		public RuleCall getDamagersDamagerParserRuleCall_3_0() { return cDamagersDamagerParserRuleCall_3_0; }

		//partitioner=Partitioner
		public Assignment getPartitionerAssignment_4() { return cPartitionerAssignment_4; }

		//Partitioner
		public RuleCall getPartitionerPartitionerParserRuleCall_4_0() { return cPartitionerPartitionerParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//"for"
		public Keyword getForKeyword_6() { return cForKeyword_6; }

		//contentTypes+=STRING+
		public Assignment getContentTypesAssignment_7() { return cContentTypesAssignment_7; }

		//STRING
		public RuleCall getContentTypesSTRINGTerminalRuleCall_7_0() { return cContentTypesSTRINGTerminalRuleCall_7_0; }
	}

	public class PartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Partition:
		//	"partition" name=ID;
		public ParserRule getRule() { return rule; }

		//"partition" name=ID
		public Group getGroup() { return cGroup; }

		//"partition"
		public Keyword getPartitionKeyword_0() { return cPartitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PartitionerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partitioner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRulePartitionerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJavaLikeParitionerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJSParitionerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Partitioner:
		//	RulePartitioner | JavaLikeParitioner | JSParitioner;
		public ParserRule getRule() { return rule; }

		//RulePartitioner | JavaLikeParitioner | JSParitioner
		public Alternatives getAlternatives() { return cAlternatives; }

		//RulePartitioner
		public RuleCall getRulePartitionerParserRuleCall_0() { return cRulePartitionerParserRuleCall_0; }

		//JavaLikeParitioner
		public RuleCall getJavaLikeParitionerParserRuleCall_1() { return cJavaLikeParitionerParserRuleCall_1; }

		//JSParitioner
		public RuleCall getJSParitionerParserRuleCall_2() { return cJSParitionerParserRuleCall_2; }
	}

	public class JavaLikeParitionerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaLikeParitioner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cJavaLikePartitionerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cJava_like_partitionerKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSinglelinedocKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSingleLineDocParitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSingleLineDocParitionPartitionCrossReference_3_0 = (CrossReference)cSingleLineDocParitionAssignment_3.eContents().get(0);
		private final RuleCall cSingleLineDocParitionPartitionIDTerminalRuleCall_3_0_1 = (RuleCall)cSingleLineDocParitionPartitionCrossReference_3_0.eContents().get(1);
		private final Keyword cMultilinedocKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMultiLineDocParitionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMultiLineDocParitionPartitionCrossReference_5_0 = (CrossReference)cMultiLineDocParitionAssignment_5.eContents().get(0);
		private final RuleCall cMultiLineDocParitionPartitionIDTerminalRuleCall_5_0_1 = (RuleCall)cMultiLineDocParitionPartitionCrossReference_5_0.eContents().get(1);
		private final Keyword cJavadocKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cJavaDocParitionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cJavaDocParitionPartitionCrossReference_7_0 = (CrossReference)cJavaDocParitionAssignment_7.eContents().get(0);
		private final RuleCall cJavaDocParitionPartitionIDTerminalRuleCall_7_0_1 = (RuleCall)cJavaDocParitionPartitionCrossReference_7_0.eContents().get(1);
		private final Keyword cCharKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCharacterParitionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cCharacterParitionPartitionCrossReference_9_0 = (CrossReference)cCharacterParitionAssignment_9.eContents().get(0);
		private final RuleCall cCharacterParitionPartitionIDTerminalRuleCall_9_0_1 = (RuleCall)cCharacterParitionPartitionCrossReference_9_0.eContents().get(1);
		private final Keyword cStringKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cStringParitionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cStringParitionPartitionCrossReference_11_0 = (CrossReference)cStringParitionAssignment_11.eContents().get(0);
		private final RuleCall cStringParitionPartitionIDTerminalRuleCall_11_0_1 = (RuleCall)cStringParitionPartitionCrossReference_11_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//JavaLikeParitioner:
		//	("java-like-partitioner" | "java_like_partitioner") "{" "singlelinedoc" singleLineDocParition=[Partition]
		//	"multilinedoc" multiLineDocParition=[Partition] "javadoc" javaDocParition=[Partition] "char"
		//	characterParition=[Partition] "string" stringParition=[Partition] "}";
		public ParserRule getRule() { return rule; }

		//("java-like-partitioner" | "java_like_partitioner") "{" "singlelinedoc" singleLineDocParition=[Partition] "multilinedoc"
		//multiLineDocParition=[Partition] "javadoc" javaDocParition=[Partition] "char" characterParition=[Partition] "string"
		//stringParition=[Partition] "}"
		public Group getGroup() { return cGroup; }

		//"java-like-partitioner" | "java_like_partitioner"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"java-like-partitioner"
		public Keyword getJavaLikePartitionerKeyword_0_0() { return cJavaLikePartitionerKeyword_0_0; }

		//"java_like_partitioner"
		public Keyword getJava_like_partitionerKeyword_0_1() { return cJava_like_partitionerKeyword_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"singlelinedoc"
		public Keyword getSinglelinedocKeyword_2() { return cSinglelinedocKeyword_2; }

		//singleLineDocParition=[Partition]
		public Assignment getSingleLineDocParitionAssignment_3() { return cSingleLineDocParitionAssignment_3; }

		//[Partition]
		public CrossReference getSingleLineDocParitionPartitionCrossReference_3_0() { return cSingleLineDocParitionPartitionCrossReference_3_0; }

		//ID
		public RuleCall getSingleLineDocParitionPartitionIDTerminalRuleCall_3_0_1() { return cSingleLineDocParitionPartitionIDTerminalRuleCall_3_0_1; }

		//"multilinedoc"
		public Keyword getMultilinedocKeyword_4() { return cMultilinedocKeyword_4; }

		//multiLineDocParition=[Partition]
		public Assignment getMultiLineDocParitionAssignment_5() { return cMultiLineDocParitionAssignment_5; }

		//[Partition]
		public CrossReference getMultiLineDocParitionPartitionCrossReference_5_0() { return cMultiLineDocParitionPartitionCrossReference_5_0; }

		//ID
		public RuleCall getMultiLineDocParitionPartitionIDTerminalRuleCall_5_0_1() { return cMultiLineDocParitionPartitionIDTerminalRuleCall_5_0_1; }

		//"javadoc"
		public Keyword getJavadocKeyword_6() { return cJavadocKeyword_6; }

		//javaDocParition=[Partition]
		public Assignment getJavaDocParitionAssignment_7() { return cJavaDocParitionAssignment_7; }

		//[Partition]
		public CrossReference getJavaDocParitionPartitionCrossReference_7_0() { return cJavaDocParitionPartitionCrossReference_7_0; }

		//ID
		public RuleCall getJavaDocParitionPartitionIDTerminalRuleCall_7_0_1() { return cJavaDocParitionPartitionIDTerminalRuleCall_7_0_1; }

		//"char"
		public Keyword getCharKeyword_8() { return cCharKeyword_8; }

		//characterParition=[Partition]
		public Assignment getCharacterParitionAssignment_9() { return cCharacterParitionAssignment_9; }

		//[Partition]
		public CrossReference getCharacterParitionPartitionCrossReference_9_0() { return cCharacterParitionPartitionCrossReference_9_0; }

		//ID
		public RuleCall getCharacterParitionPartitionIDTerminalRuleCall_9_0_1() { return cCharacterParitionPartitionIDTerminalRuleCall_9_0_1; }

		//"string"
		public Keyword getStringKeyword_10() { return cStringKeyword_10; }

		//stringParition=[Partition]
		public Assignment getStringParitionAssignment_11() { return cStringParitionAssignment_11; }

		//[Partition]
		public CrossReference getStringParitionPartitionCrossReference_11_0() { return cStringParitionPartitionCrossReference_11_0; }

		//ID
		public RuleCall getStringParitionPartitionIDTerminalRuleCall_11_0_1() { return cStringParitionPartitionIDTerminalRuleCall_11_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class RulePartitionerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RulePartitioner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRulePartitionerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRule_partitionerKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesParitionRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RulePartitioner:
		//	("rule-partitioner" | "rule_partitioner") "{" rules+=ParitionRule+ "}";
		public ParserRule getRule() { return rule; }

		//("rule-partitioner" | "rule_partitioner") "{" rules+=ParitionRule+ "}"
		public Group getGroup() { return cGroup; }

		//"rule-partitioner" | "rule_partitioner"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"rule-partitioner"
		public Keyword getRulePartitionerKeyword_0_0() { return cRulePartitionerKeyword_0_0; }

		//"rule_partitioner"
		public Keyword getRule_partitionerKeyword_0_1() { return cRule_partitionerKeyword_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//rules+=ParitionRule+
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }

		//ParitionRule
		public RuleCall getRulesParitionRuleParserRuleCall_2_0() { return cRulesParitionRuleParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class JSParitionerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JSParitioner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cJsPartitionerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cJs_partitionerKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cFileURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileURISTRINGTerminalRuleCall_1_0 = (RuleCall)cFileURIAssignment_1.eContents().get(0);
		
		//JSParitioner:
		//	("js-partitioner" | "js_partitioner") fileURI=STRING;
		public ParserRule getRule() { return rule; }

		//("js-partitioner" | "js_partitioner") fileURI=STRING
		public Group getGroup() { return cGroup; }

		//"js-partitioner" | "js_partitioner"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"js-partitioner"
		public Keyword getJsPartitionerKeyword_0_0() { return cJsPartitionerKeyword_0_0; }

		//"js_partitioner"
		public Keyword getJs_partitionerKeyword_0_1() { return cJs_partitionerKeyword_0_1; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_1() { return cFileURIAssignment_1; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_1_0() { return cFileURISTRINGTerminalRuleCall_1_0; }
	}

	public class DamagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Damager");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDamagerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJSDamagerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Damager:
		//	RuleDamager | JSDamager;
		public ParserRule getRule() { return rule; }

		//RuleDamager | JSDamager
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDamager
		public RuleCall getRuleDamagerParserRuleCall_0() { return cRuleDamagerParserRuleCall_0; }

		//JSDamager
		public RuleCall getJSDamagerParserRuleCall_1() { return cJSDamagerParserRuleCall_1; }
	}

	public class JSDamagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JSDamager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cJsDamagerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cJs_damagerKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cPartitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartitionPartitionCrossReference_1_0 = (CrossReference)cPartitionAssignment_1.eContents().get(0);
		private final RuleCall cPartitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cPartitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cFileURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileURISTRINGTerminalRuleCall_2_0 = (RuleCall)cFileURIAssignment_2.eContents().get(0);
		
		//JSDamager:
		//	("js-damager" | "js_damager") partition=[Partition] fileURI=STRING;
		public ParserRule getRule() { return rule; }

		//("js-damager" | "js_damager") partition=[Partition] fileURI=STRING
		public Group getGroup() { return cGroup; }

		//"js-damager" | "js_damager"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"js-damager"
		public Keyword getJsDamagerKeyword_0_0() { return cJsDamagerKeyword_0_0; }

		//"js_damager"
		public Keyword getJs_damagerKeyword_0_1() { return cJs_damagerKeyword_0_1; }

		//partition=[Partition]
		public Assignment getPartitionAssignment_1() { return cPartitionAssignment_1; }

		//[Partition]
		public CrossReference getPartitionPartitionCrossReference_1_0() { return cPartitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getPartitionPartitionIDTerminalRuleCall_1_0_1() { return cPartitionPartitionIDTerminalRuleCall_1_0_1; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_2() { return cFileURIAssignment_2; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_2_0() { return cFileURISTRINGTerminalRuleCall_2_0; }
	}

	public class RuleDamagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDamager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRuleDamagerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRule_damagerKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cPartitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartitionPartitionCrossReference_1_0 = (CrossReference)cPartitionAssignment_1.eContents().get(0);
		private final RuleCall cPartitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cPartitionPartitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTokensAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTokensScannerTokenParserRuleCall_3_0 = (RuleCall)cTokensAssignment_3.eContents().get(0);
		private final Assignment cKeywordGroupsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeywordGroupsKeywordGroupParserRuleCall_4_0 = (RuleCall)cKeywordGroupsAssignment_4.eContents().get(0);
		private final Assignment cRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRulesScannerRuleParserRuleCall_5_0 = (RuleCall)cRulesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RuleDamager:
		//	("rule-damager" | "rule_damager") partition=[Partition] "{" tokens+=ScannerToken* keywordGroups+=KeywordGroup*
		//	rules+=ScannerRule* "}";
		public ParserRule getRule() { return rule; }

		//("rule-damager" | "rule_damager") partition=[Partition] "{" tokens+=ScannerToken* keywordGroups+=KeywordGroup*
		//rules+=ScannerRule* "}"
		public Group getGroup() { return cGroup; }

		//"rule-damager" | "rule_damager"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"rule-damager"
		public Keyword getRuleDamagerKeyword_0_0() { return cRuleDamagerKeyword_0_0; }

		//"rule_damager"
		public Keyword getRule_damagerKeyword_0_1() { return cRule_damagerKeyword_0_1; }

		//partition=[Partition]
		public Assignment getPartitionAssignment_1() { return cPartitionAssignment_1; }

		//[Partition]
		public CrossReference getPartitionPartitionCrossReference_1_0() { return cPartitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getPartitionPartitionIDTerminalRuleCall_1_0_1() { return cPartitionPartitionIDTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//tokens+=ScannerToken*
		public Assignment getTokensAssignment_3() { return cTokensAssignment_3; }

		//ScannerToken
		public RuleCall getTokensScannerTokenParserRuleCall_3_0() { return cTokensScannerTokenParserRuleCall_3_0; }

		//keywordGroups+=KeywordGroup*
		public Assignment getKeywordGroupsAssignment_4() { return cKeywordGroupsAssignment_4; }

		//KeywordGroup
		public RuleCall getKeywordGroupsKeywordGroupParserRuleCall_4_0() { return cKeywordGroupsKeywordGroupParserRuleCall_4_0; }

		//rules+=ScannerRule*
		public Assignment getRulesAssignment_5() { return cRulesAssignment_5; }

		//ScannerRule
		public RuleCall getRulesScannerRuleParserRuleCall_5_0() { return cRulesScannerRuleParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ScannerTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerToken");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefaultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDefaultDefaultKeyword_0_0 = (Keyword)cDefaultAssignment_0.eContents().get(0);
		private final Keyword cTokenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ScannerToken:
		//	default?="default"? "token" name=ID;
		public ParserRule getRule() { return rule; }

		//default?="default"? "token" name=ID
		public Group getGroup() { return cGroup; }

		//default?="default"?
		public Assignment getDefaultAssignment_0() { return cDefaultAssignment_0; }

		//"default"
		public Keyword getDefaultDefaultKeyword_0_0() { return cDefaultDefaultKeyword_0_0; }

		//"token"
		public Keyword getTokenKeyword_1() { return cTokenKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class KeywordGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeywordGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeywordsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeywordsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeywordsKeywordParserRuleCall_3_0 = (RuleCall)cKeywordsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cKeywordsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cKeywordsKeywordParserRuleCall_4_1_0 = (RuleCall)cKeywordsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//KeywordGroup:
		//	"keywords" token=[ScannerToken] "[" keywords+=Keyword ("," keywords+=Keyword)* "]";
		public ParserRule getRule() { return rule; }

		//"keywords" token=[ScannerToken] "[" keywords+=Keyword ("," keywords+=Keyword)* "]"
		public Group getGroup() { return cGroup; }

		//"keywords"
		public Keyword getKeywordsKeyword_0() { return cKeywordsKeyword_0; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//keywords+=Keyword
		public Assignment getKeywordsAssignment_3() { return cKeywordsAssignment_3; }

		//Keyword
		public RuleCall getKeywordsKeywordParserRuleCall_3_0() { return cKeywordsKeywordParserRuleCall_3_0; }

		//("," keywords+=Keyword)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//keywords+=Keyword
		public Assignment getKeywordsAssignment_4_1() { return cKeywordsAssignment_4_1; }

		//Keyword
		public RuleCall getKeywordsKeywordParserRuleCall_4_1_0() { return cKeywordsKeywordParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSinceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cVersionAssignment_1_1.eContents().get(0);
		
		//Keyword:
		//	name=STRING ("since" version=STRING)?;
		public ParserRule getRule() { return rule; }

		//name=STRING ("since" version=STRING)?
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//("since" version=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"since"
		public Keyword getSinceKeyword_1_0() { return cSinceKeyword_1_0; }

		//version=STRING
		public Assignment getVersionAssignment_1_1() { return cVersionAssignment_1_1; }

		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_1_1_0() { return cVersionSTRINGTerminalRuleCall_1_1_0; }
	}

	public class ScannerRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScannerSingleLineRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScannerMultiLineRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScannerCharacterRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScannerJSRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cScannerWhitespaceRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ScannerRule:
		//	ScannerSingleLineRule | ScannerMultiLineRule | ScannerCharacterRule | ScannerJSRule | ScannerWhitespaceRule;
		public ParserRule getRule() { return rule; }

		//ScannerSingleLineRule | ScannerMultiLineRule | ScannerCharacterRule | ScannerJSRule | ScannerWhitespaceRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//ScannerSingleLineRule
		public RuleCall getScannerSingleLineRuleParserRuleCall_0() { return cScannerSingleLineRuleParserRuleCall_0; }

		//ScannerMultiLineRule
		public RuleCall getScannerMultiLineRuleParserRuleCall_1() { return cScannerMultiLineRuleParserRuleCall_1; }

		//ScannerCharacterRule
		public RuleCall getScannerCharacterRuleParserRuleCall_2() { return cScannerCharacterRuleParserRuleCall_2; }

		//ScannerJSRule
		public RuleCall getScannerJSRuleParserRuleCall_3() { return cScannerJSRuleParserRuleCall_3; }

		//ScannerWhitespaceRule
		public RuleCall getScannerWhitespaceRuleParserRuleCall_4() { return cScannerWhitespaceRuleParserRuleCall_4; }
	}

	public class ParitionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParitionRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPartitionSingleLineRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartitionMultiLineRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPartitionJSRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParitionRule:
		//	PartitionSingleLineRule | PartitionMultiLineRule | PartitionJSRule;
		public ParserRule getRule() { return rule; }

		//PartitionSingleLineRule | PartitionMultiLineRule | PartitionJSRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//PartitionSingleLineRule
		public RuleCall getPartitionSingleLineRuleParserRuleCall_0() { return cPartitionSingleLineRuleParserRuleCall_0; }

		//PartitionMultiLineRule
		public RuleCall getPartitionMultiLineRuleParserRuleCall_1() { return cPartitionMultiLineRuleParserRuleCall_1; }

		//PartitionJSRule
		public RuleCall getPartitionJSRuleParserRuleCall_2() { return cPartitionJSRuleParserRuleCall_2; }
	}

	public class ScannerSingleLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerSingleLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSingleLineKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSingle_lineKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//ScannerSingleLineRule:
		//	("single-line" | "single_line") token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
		//	escapeSeq=STRING)?;
		public ParserRule getRule() { return rule; }

		//("single-line" | "single_line") token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
		//escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"single-line" | "single_line"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"single-line"
		public Keyword getSingleLineKeyword_0_0() { return cSingleLineKeyword_0_0; }

		//"single_line"
		public Keyword getSingle_lineKeyword_0_1() { return cSingle_lineKeyword_0_1; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class PartitionSingleLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartitionSingleLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSingleLineKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSingle_lineKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cParitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParitionPartitionCrossReference_1_0 = (CrossReference)cParitionAssignment_1.eContents().get(0);
		private final RuleCall cParitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cParitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//PartitionSingleLineRule:
		//	("single-line" | "single_line") parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
		//	escapeSeq=STRING)?;
		public ParserRule getRule() { return rule; }

		//("single-line" | "single_line") parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
		//escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"single-line" | "single_line"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"single-line"
		public Keyword getSingleLineKeyword_0_0() { return cSingleLineKeyword_0_0; }

		//"single_line"
		public Keyword getSingle_lineKeyword_0_1() { return cSingle_lineKeyword_0_1; }

		//parition=[Partition]
		public Assignment getParitionAssignment_1() { return cParitionAssignment_1; }

		//[Partition]
		public CrossReference getParitionPartitionCrossReference_1_0() { return cParitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getParitionPartitionIDTerminalRuleCall_1_0_1() { return cParitionPartitionIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class ScannerMultiLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerMultiLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMultiLineKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMulti_lineKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//ScannerMultiLineRule:
		//	("multi-line" | "multi_line") token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
		//	escapeSeq=STRING)?;
		public ParserRule getRule() { return rule; }

		//("multi-line" | "multi_line") token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"multi-line" | "multi_line"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"multi-line"
		public Keyword getMultiLineKeyword_0_0() { return cMultiLineKeyword_0_0; }

		//"multi_line"
		public Keyword getMulti_lineKeyword_0_1() { return cMulti_lineKeyword_0_1; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class PartitionMultiLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartitionMultiLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMultiLineKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMulti_lineKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cParitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParitionPartitionCrossReference_1_0 = (CrossReference)cParitionAssignment_1.eContents().get(0);
		private final RuleCall cParitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cParitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//PartitionMultiLineRule:
		//	("multi-line" | "multi_line") parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
		//	escapeSeq=STRING)?;
		public ParserRule getRule() { return rule; }

		//("multi-line" | "multi_line") parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"multi-line" | "multi_line"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"multi-line"
		public Keyword getMultiLineKeyword_0_0() { return cMultiLineKeyword_0_0; }

		//"multi_line"
		public Keyword getMulti_lineKeyword_0_1() { return cMulti_lineKeyword_0_1; }

		//parition=[Partition]
		public Assignment getParitionAssignment_1() { return cParitionAssignment_1; }

		//[Partition]
		public CrossReference getParitionPartitionCrossReference_1_0() { return cParitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getParitionPartitionIDTerminalRuleCall_1_0_1() { return cParitionPartitionIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class ScannerCharacterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerCharacterRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCharacterRuleKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCharacter_ruleKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCharactersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_3_0 = (RuleCall)cCharactersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCharactersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cCharactersAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ScannerCharacterRule:
		//	("character-rule" | "character_rule") token=[ScannerToken] "[" characters+=STRING ("," characters+=STRING)* "]";
		public ParserRule getRule() { return rule; }

		//("character-rule" | "character_rule") token=[ScannerToken] "[" characters+=STRING ("," characters+=STRING)* "]"
		public Group getGroup() { return cGroup; }

		//"character-rule" | "character_rule"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"character-rule"
		public Keyword getCharacterRuleKeyword_0_0() { return cCharacterRuleKeyword_0_0; }

		//"character_rule"
		public Keyword getCharacter_ruleKeyword_0_1() { return cCharacter_ruleKeyword_0_1; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//characters+=STRING
		public Assignment getCharactersAssignment_3() { return cCharactersAssignment_3; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_3_0() { return cCharactersSTRINGTerminalRuleCall_3_0; }

		//("," characters+=STRING)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//characters+=STRING
		public Assignment getCharactersAssignment_4_1() { return cCharactersAssignment_4_1; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_4_1_0() { return cCharactersSTRINGTerminalRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class ScannerJSRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerJSRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cJavascriptRuleKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cJavascript_ruleKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Assignment cFileURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileURISTRINGTerminalRuleCall_2_0 = (RuleCall)cFileURIAssignment_2.eContents().get(0);
		
		//ScannerJSRule:
		//	("javascript-rule" | "javascript_rule") token=[ScannerToken] fileURI=STRING;
		public ParserRule getRule() { return rule; }

		//("javascript-rule" | "javascript_rule") token=[ScannerToken] fileURI=STRING
		public Group getGroup() { return cGroup; }

		//"javascript-rule" | "javascript_rule"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"javascript-rule"
		public Keyword getJavascriptRuleKeyword_0_0() { return cJavascriptRuleKeyword_0_0; }

		//"javascript_rule"
		public Keyword getJavascript_ruleKeyword_0_1() { return cJavascript_ruleKeyword_0_1; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_2() { return cFileURIAssignment_2; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_2_0() { return cFileURISTRINGTerminalRuleCall_2_0; }
	}

	public class PartitionJSRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartitionJSRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cJavascriptRuleKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cJavascript_ruleKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenPartitionCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cFileURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileURISTRINGTerminalRuleCall_2_0 = (RuleCall)cFileURIAssignment_2.eContents().get(0);
		
		//PartitionJSRule:
		//	("javascript-rule" | "javascript_rule") token=[Partition] fileURI=STRING;
		public ParserRule getRule() { return rule; }

		//("javascript-rule" | "javascript_rule") token=[Partition] fileURI=STRING
		public Group getGroup() { return cGroup; }

		//"javascript-rule" | "javascript_rule"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"javascript-rule"
		public Keyword getJavascriptRuleKeyword_0_0() { return cJavascriptRuleKeyword_0_0; }

		//"javascript_rule"
		public Keyword getJavascript_ruleKeyword_0_1() { return cJavascript_ruleKeyword_0_1; }

		//token=[Partition]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[Partition]
		public CrossReference getTokenPartitionCrossReference_1_0() { return cTokenPartitionCrossReference_1_0; }

		//ID
		public RuleCall getTokenPartitionIDTerminalRuleCall_1_0_1() { return cTokenPartitionIDTerminalRuleCall_1_0_1; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_2() { return cFileURIAssignment_2; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_2_0() { return cFileURISTRINGTerminalRuleCall_2_0; }
	}

	public class ScannerWhitespaceRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerWhitespaceRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cWhitespaceRuleKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWhitespace_ruleKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cCharactersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cCharactersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cCharactersAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_2_0_2_1_0 = (RuleCall)cCharactersAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cJavawhitespaceAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cJavawhitespaceJavawhitespaceKeyword_2_1_0 = (Keyword)cJavawhitespaceAssignment_2_1.eContents().get(0);
		private final Assignment cFileURIAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cFileURISTRINGTerminalRuleCall_2_2_0 = (RuleCall)cFileURIAssignment_2_2.eContents().get(0);
		
		//ScannerWhitespaceRule:
		//	("whitespace-rule" | "whitespace_rule") token=[ScannerToken]? ("[" characters+=STRING ("," characters+=STRING)* "]" |
		//	javawhitespace?="javawhitespace" | fileURI=STRING);
		public ParserRule getRule() { return rule; }

		//("whitespace-rule" | "whitespace_rule") token=[ScannerToken]? ("[" characters+=STRING ("," characters+=STRING)* "]" |
		//javawhitespace?="javawhitespace" | fileURI=STRING)
		public Group getGroup() { return cGroup; }

		//"whitespace-rule" | "whitespace_rule"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"whitespace-rule"
		public Keyword getWhitespaceRuleKeyword_0_0() { return cWhitespaceRuleKeyword_0_0; }

		//"whitespace_rule"
		public Keyword getWhitespace_ruleKeyword_0_1() { return cWhitespace_ruleKeyword_0_1; }

		//token=[ScannerToken]?
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//"[" characters+=STRING ("," characters+=STRING)* "]" | javawhitespace?="javawhitespace" | fileURI=STRING
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"[" characters+=STRING ("," characters+=STRING)* "]"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0_0() { return cLeftSquareBracketKeyword_2_0_0; }

		//characters+=STRING
		public Assignment getCharactersAssignment_2_0_1() { return cCharactersAssignment_2_0_1; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_2_0_1_0() { return cCharactersSTRINGTerminalRuleCall_2_0_1_0; }

		//("," characters+=STRING)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//","
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }

		//characters+=STRING
		public Assignment getCharactersAssignment_2_0_2_1() { return cCharactersAssignment_2_0_2_1; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_2_0_2_1_0() { return cCharactersSTRINGTerminalRuleCall_2_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_0_3() { return cRightSquareBracketKeyword_2_0_3; }

		//javawhitespace?="javawhitespace"
		public Assignment getJavawhitespaceAssignment_2_1() { return cJavawhitespaceAssignment_2_1; }

		//"javawhitespace"
		public Keyword getJavawhitespaceJavawhitespaceKeyword_2_1_0() { return cJavawhitespaceJavawhitespaceKeyword_2_1_0; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_2_2() { return cFileURIAssignment_2_2; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_2_2_0() { return cFileURISTRINGTerminalRuleCall_2_2_0; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final RuleCall cRGBColorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Color:
		//	RGBColor;
		public ParserRule getRule() { return rule; }

		//RGBColor
		public RuleCall getRGBColorParserRuleCall() { return cRGBColorParserRuleCall; }
	}

	public class RGBColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RGBColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRgbKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRINTTerminalRuleCall_2_0 = (RuleCall)cRAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGINTTerminalRuleCall_4_0 = (RuleCall)cGAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBINTTerminalRuleCall_6_0 = (RuleCall)cBAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RGBColor:
		//	"rgb" "(" r=INT "," g=INT "," b=INT ")";
		public ParserRule getRule() { return rule; }

		//"rgb" "(" r=INT "," g=INT "," b=INT ")"
		public Group getGroup() { return cGroup; }

		//"rgb"
		public Keyword getRgbKeyword_0() { return cRgbKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//r=INT
		public Assignment getRAssignment_2() { return cRAssignment_2; }

		//INT
		public RuleCall getRINTTerminalRuleCall_2_0() { return cRINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//g=INT
		public Assignment getGAssignment_4() { return cGAssignment_4; }

		//INT
		public RuleCall getGINTTerminalRuleCall_4_0() { return cGINTTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//b=INT
		public Assignment getBAssignment_6() { return cBAssignment_6; }

		//INT
		public RuleCall getBINTTerminalRuleCall_6_0() { return cBINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class FontElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Font");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesFontTypeEnumRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//Font:
		//	name=ID size=INT attributes+=FontType*;
		public ParserRule getRule() { return rule; }

		//name=ID size=INT attributes+=FontType*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }

		//attributes+=FontType*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//FontType
		public RuleCall getAttributesFontTypeEnumRuleCall_2_0() { return cAttributesFontTypeEnumRuleCall_2_0; }
	}
	
	
	public class FontTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FontType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBoldEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBoldBoldKeyword_0_0 = (Keyword)cBoldEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cItalicEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cItalicItalicKeyword_1_0 = (Keyword)cItalicEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUnderlineEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUnderlineUnderlineKeyword_2_0 = (Keyword)cUnderlineEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStrike_throughEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStrike_throughStrikeThroughKeyword_3_0 = (Keyword)cStrike_throughEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum FontType:
		//	bold | italic | underline | strike_through="strike-through";
		public EnumRule getRule() { return rule; }

		//bold | italic | underline | strike_through="strike-through"
		public Alternatives getAlternatives() { return cAlternatives; }

		//bold
		public EnumLiteralDeclaration getBoldEnumLiteralDeclaration_0() { return cBoldEnumLiteralDeclaration_0; }

		//"bold"
		public Keyword getBoldBoldKeyword_0_0() { return cBoldBoldKeyword_0_0; }

		//italic
		public EnumLiteralDeclaration getItalicEnumLiteralDeclaration_1() { return cItalicEnumLiteralDeclaration_1; }

		//"italic"
		public Keyword getItalicItalicKeyword_1_0() { return cItalicItalicKeyword_1_0; }

		//underline
		public EnumLiteralDeclaration getUnderlineEnumLiteralDeclaration_2() { return cUnderlineEnumLiteralDeclaration_2; }

		//"underline"
		public Keyword getUnderlineUnderlineKeyword_2_0() { return cUnderlineUnderlineKeyword_2_0; }

		//strike_through="strike-through"
		public EnumLiteralDeclaration getStrike_throughEnumLiteralDeclaration_3() { return cStrike_throughEnumLiteralDeclaration_3; }

		//"strike-through"
		public Keyword getStrike_throughStrikeThroughKeyword_3_0() { return cStrike_throughStrikeThroughKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final PartitionElements pPartition;
	private final PartitionerElements pPartitioner;
	private final JavaLikeParitionerElements pJavaLikeParitioner;
	private final RulePartitionerElements pRulePartitioner;
	private final JSParitionerElements pJSParitioner;
	private final DamagerElements pDamager;
	private final JSDamagerElements pJSDamager;
	private final RuleDamagerElements pRuleDamager;
	private final ScannerTokenElements pScannerToken;
	private final KeywordGroupElements pKeywordGroup;
	private final KeywordElements pKeyword;
	private final ScannerRuleElements pScannerRule;
	private final ParitionRuleElements pParitionRule;
	private final ScannerSingleLineRuleElements pScannerSingleLineRule;
	private final PartitionSingleLineRuleElements pPartitionSingleLineRule;
	private final ScannerMultiLineRuleElements pScannerMultiLineRule;
	private final PartitionMultiLineRuleElements pPartitionMultiLineRule;
	private final ScannerCharacterRuleElements pScannerCharacterRule;
	private final ScannerJSRuleElements pScannerJSRule;
	private final PartitionJSRuleElements pPartitionJSRule;
	private final ScannerWhitespaceRuleElements pScannerWhitespaceRule;
	private final ColorElements pColor;
	private final RGBColorElements pRGBColor;
	private final FontElements pFont;
	private final FontTypeElements unknownRuleFontType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPartition = new PartitionElements();
		this.pPartitioner = new PartitionerElements();
		this.pJavaLikeParitioner = new JavaLikeParitionerElements();
		this.pRulePartitioner = new RulePartitionerElements();
		this.pJSParitioner = new JSParitionerElements();
		this.pDamager = new DamagerElements();
		this.pJSDamager = new JSDamagerElements();
		this.pRuleDamager = new RuleDamagerElements();
		this.pScannerToken = new ScannerTokenElements();
		this.pKeywordGroup = new KeywordGroupElements();
		this.pKeyword = new KeywordElements();
		this.pScannerRule = new ScannerRuleElements();
		this.pParitionRule = new ParitionRuleElements();
		this.pScannerSingleLineRule = new ScannerSingleLineRuleElements();
		this.pPartitionSingleLineRule = new PartitionSingleLineRuleElements();
		this.pScannerMultiLineRule = new ScannerMultiLineRuleElements();
		this.pPartitionMultiLineRule = new PartitionMultiLineRuleElements();
		this.pScannerCharacterRule = new ScannerCharacterRuleElements();
		this.pScannerJSRule = new ScannerJSRuleElements();
		this.pPartitionJSRule = new PartitionJSRuleElements();
		this.pScannerWhitespaceRule = new ScannerWhitespaceRuleElements();
		this.pColor = new ColorElements();
		this.pRGBColor = new RGBColorElements();
		this.pFont = new FontElements();
		this.unknownRuleFontType = new FontTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.fx.code.compensator.hsl.HSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	name=ID "{" partitions+=Partition+ damagers+=Damager+ partitioner=Partitioner "}" "for" contentTypes+=STRING+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Partition:
	//	"partition" name=ID;
	public PartitionElements getPartitionAccess() {
		return pPartition;
	}
	
	public ParserRule getPartitionRule() {
		return getPartitionAccess().getRule();
	}

	//Partitioner:
	//	RulePartitioner | JavaLikeParitioner | JSParitioner;
	public PartitionerElements getPartitionerAccess() {
		return pPartitioner;
	}
	
	public ParserRule getPartitionerRule() {
		return getPartitionerAccess().getRule();
	}

	//JavaLikeParitioner:
	//	("java-like-partitioner" | "java_like_partitioner") "{" "singlelinedoc" singleLineDocParition=[Partition]
	//	"multilinedoc" multiLineDocParition=[Partition] "javadoc" javaDocParition=[Partition] "char"
	//	characterParition=[Partition] "string" stringParition=[Partition] "}";
	public JavaLikeParitionerElements getJavaLikeParitionerAccess() {
		return pJavaLikeParitioner;
	}
	
	public ParserRule getJavaLikeParitionerRule() {
		return getJavaLikeParitionerAccess().getRule();
	}

	//RulePartitioner:
	//	("rule-partitioner" | "rule_partitioner") "{" rules+=ParitionRule+ "}";
	public RulePartitionerElements getRulePartitionerAccess() {
		return pRulePartitioner;
	}
	
	public ParserRule getRulePartitionerRule() {
		return getRulePartitionerAccess().getRule();
	}

	//JSParitioner:
	//	("js-partitioner" | "js_partitioner") fileURI=STRING;
	public JSParitionerElements getJSParitionerAccess() {
		return pJSParitioner;
	}
	
	public ParserRule getJSParitionerRule() {
		return getJSParitionerAccess().getRule();
	}

	//Damager:
	//	RuleDamager | JSDamager;
	public DamagerElements getDamagerAccess() {
		return pDamager;
	}
	
	public ParserRule getDamagerRule() {
		return getDamagerAccess().getRule();
	}

	//JSDamager:
	//	("js-damager" | "js_damager") partition=[Partition] fileURI=STRING;
	public JSDamagerElements getJSDamagerAccess() {
		return pJSDamager;
	}
	
	public ParserRule getJSDamagerRule() {
		return getJSDamagerAccess().getRule();
	}

	//RuleDamager:
	//	("rule-damager" | "rule_damager") partition=[Partition] "{" tokens+=ScannerToken* keywordGroups+=KeywordGroup*
	//	rules+=ScannerRule* "}";
	public RuleDamagerElements getRuleDamagerAccess() {
		return pRuleDamager;
	}
	
	public ParserRule getRuleDamagerRule() {
		return getRuleDamagerAccess().getRule();
	}

	//ScannerToken:
	//	default?="default"? "token" name=ID;
	public ScannerTokenElements getScannerTokenAccess() {
		return pScannerToken;
	}
	
	public ParserRule getScannerTokenRule() {
		return getScannerTokenAccess().getRule();
	}

	//KeywordGroup:
	//	"keywords" token=[ScannerToken] "[" keywords+=Keyword ("," keywords+=Keyword)* "]";
	public KeywordGroupElements getKeywordGroupAccess() {
		return pKeywordGroup;
	}
	
	public ParserRule getKeywordGroupRule() {
		return getKeywordGroupAccess().getRule();
	}

	//Keyword:
	//	name=STRING ("since" version=STRING)?;
	public KeywordElements getKeywordAccess() {
		return pKeyword;
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}

	//ScannerRule:
	//	ScannerSingleLineRule | ScannerMultiLineRule | ScannerCharacterRule | ScannerJSRule | ScannerWhitespaceRule;
	public ScannerRuleElements getScannerRuleAccess() {
		return pScannerRule;
	}
	
	public ParserRule getScannerRuleRule() {
		return getScannerRuleAccess().getRule();
	}

	//ParitionRule:
	//	PartitionSingleLineRule | PartitionMultiLineRule | PartitionJSRule;
	public ParitionRuleElements getParitionRuleAccess() {
		return pParitionRule;
	}
	
	public ParserRule getParitionRuleRule() {
		return getParitionRuleAccess().getRule();
	}

	//ScannerSingleLineRule:
	//	("single-line" | "single_line") token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
	//	escapeSeq=STRING)?;
	public ScannerSingleLineRuleElements getScannerSingleLineRuleAccess() {
		return pScannerSingleLineRule;
	}
	
	public ParserRule getScannerSingleLineRuleRule() {
		return getScannerSingleLineRuleAccess().getRule();
	}

	//PartitionSingleLineRule:
	//	("single-line" | "single_line") parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
	//	escapeSeq=STRING)?;
	public PartitionSingleLineRuleElements getPartitionSingleLineRuleAccess() {
		return pPartitionSingleLineRule;
	}
	
	public ParserRule getPartitionSingleLineRuleRule() {
		return getPartitionSingleLineRuleAccess().getRule();
	}

	//ScannerMultiLineRule:
	//	("multi-line" | "multi_line") token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
	//	escapeSeq=STRING)?;
	public ScannerMultiLineRuleElements getScannerMultiLineRuleAccess() {
		return pScannerMultiLineRule;
	}
	
	public ParserRule getScannerMultiLineRuleRule() {
		return getScannerMultiLineRuleAccess().getRule();
	}

	//PartitionMultiLineRule:
	//	("multi-line" | "multi_line") parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by"
	//	escapeSeq=STRING)?;
	public PartitionMultiLineRuleElements getPartitionMultiLineRuleAccess() {
		return pPartitionMultiLineRule;
	}
	
	public ParserRule getPartitionMultiLineRuleRule() {
		return getPartitionMultiLineRuleAccess().getRule();
	}

	//ScannerCharacterRule:
	//	("character-rule" | "character_rule") token=[ScannerToken] "[" characters+=STRING ("," characters+=STRING)* "]";
	public ScannerCharacterRuleElements getScannerCharacterRuleAccess() {
		return pScannerCharacterRule;
	}
	
	public ParserRule getScannerCharacterRuleRule() {
		return getScannerCharacterRuleAccess().getRule();
	}

	//ScannerJSRule:
	//	("javascript-rule" | "javascript_rule") token=[ScannerToken] fileURI=STRING;
	public ScannerJSRuleElements getScannerJSRuleAccess() {
		return pScannerJSRule;
	}
	
	public ParserRule getScannerJSRuleRule() {
		return getScannerJSRuleAccess().getRule();
	}

	//PartitionJSRule:
	//	("javascript-rule" | "javascript_rule") token=[Partition] fileURI=STRING;
	public PartitionJSRuleElements getPartitionJSRuleAccess() {
		return pPartitionJSRule;
	}
	
	public ParserRule getPartitionJSRuleRule() {
		return getPartitionJSRuleAccess().getRule();
	}

	//ScannerWhitespaceRule:
	//	("whitespace-rule" | "whitespace_rule") token=[ScannerToken]? ("[" characters+=STRING ("," characters+=STRING)* "]" |
	//	javawhitespace?="javawhitespace" | fileURI=STRING);
	public ScannerWhitespaceRuleElements getScannerWhitespaceRuleAccess() {
		return pScannerWhitespaceRule;
	}
	
	public ParserRule getScannerWhitespaceRuleRule() {
		return getScannerWhitespaceRuleAccess().getRule();
	}

	//Color:
	//	RGBColor;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//RGBColor:
	//	"rgb" "(" r=INT "," g=INT "," b=INT ")";
	public RGBColorElements getRGBColorAccess() {
		return pRGBColor;
	}
	
	public ParserRule getRGBColorRule() {
		return getRGBColorAccess().getRule();
	}

	//Font:
	//	name=ID size=INT attributes+=FontType*;
	public FontElements getFontAccess() {
		return pFont;
	}
	
	public ParserRule getFontRule() {
		return getFontAccess().getRule();
	}

	//enum FontType:
	//	bold | italic | underline | strike_through="strike-through";
	public FontTypeElements getFontTypeAccess() {
		return unknownRuleFontType;
	}
	
	public EnumRule getFontTypeRule() {
		return getFontTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
