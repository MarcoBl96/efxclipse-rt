/*******************************************************************************
 * Copyright (c) 2022 BestSolution.at and others.
 *  
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v.2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0.
 *  
 * SPDX-License-Identifier: EPL-2.0
 *  
 * Contributors:
 *     BestSolution.at - initial API and implementation
 *******************************************************************************/
/*
* generated by Xtext
*/
package org.eclipse.fx.code.compensator.hsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.fx.code.compensator.hsl.services.HSLGrammarAccess;

public class HSLParser extends AbstractContentAssistParser {
	
	@Inject
	private HSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.fx.code.compensator.hsl.ui.contentassist.antlr.internal.InternalHSLParser createParser() {
		org.eclipse.fx.code.compensator.hsl.ui.contentassist.antlr.internal.InternalHSLParser result = new org.eclipse.fx.code.compensator.hsl.ui.contentassist.antlr.internal.InternalHSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPartitionerAccess().getAlternatives(), "rule__Partitioner__Alternatives");
					put(grammarAccess.getJavaLikeParitionerAccess().getAlternatives_0(), "rule__JavaLikeParitioner__Alternatives_0");
					put(grammarAccess.getRulePartitionerAccess().getAlternatives_0(), "rule__RulePartitioner__Alternatives_0");
					put(grammarAccess.getJSParitionerAccess().getAlternatives_0(), "rule__JSParitioner__Alternatives_0");
					put(grammarAccess.getDamagerAccess().getAlternatives(), "rule__Damager__Alternatives");
					put(grammarAccess.getJSDamagerAccess().getAlternatives_0(), "rule__JSDamager__Alternatives_0");
					put(grammarAccess.getRuleDamagerAccess().getAlternatives_0(), "rule__RuleDamager__Alternatives_0");
					put(grammarAccess.getScannerRuleAccess().getAlternatives(), "rule__ScannerRule__Alternatives");
					put(grammarAccess.getParitionRuleAccess().getAlternatives(), "rule__ParitionRule__Alternatives");
					put(grammarAccess.getScannerSingleLineRuleAccess().getAlternatives_0(), "rule__ScannerSingleLineRule__Alternatives_0");
					put(grammarAccess.getPartitionSingleLineRuleAccess().getAlternatives_0(), "rule__PartitionSingleLineRule__Alternatives_0");
					put(grammarAccess.getScannerMultiLineRuleAccess().getAlternatives_0(), "rule__ScannerMultiLineRule__Alternatives_0");
					put(grammarAccess.getPartitionMultiLineRuleAccess().getAlternatives_0(), "rule__PartitionMultiLineRule__Alternatives_0");
					put(grammarAccess.getScannerCharacterRuleAccess().getAlternatives_0(), "rule__ScannerCharacterRule__Alternatives_0");
					put(grammarAccess.getScannerJSRuleAccess().getAlternatives_0(), "rule__ScannerJSRule__Alternatives_0");
					put(grammarAccess.getPartitionJSRuleAccess().getAlternatives_0(), "rule__PartitionJSRule__Alternatives_0");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getAlternatives_0(), "rule__ScannerWhitespaceRule__Alternatives_0");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getAlternatives_2(), "rule__ScannerWhitespaceRule__Alternatives_2");
					put(grammarAccess.getFontTypeAccess().getAlternatives(), "rule__FontType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getPartitionAccess().getGroup(), "rule__Partition__Group__0");
					put(grammarAccess.getJavaLikeParitionerAccess().getGroup(), "rule__JavaLikeParitioner__Group__0");
					put(grammarAccess.getRulePartitionerAccess().getGroup(), "rule__RulePartitioner__Group__0");
					put(grammarAccess.getJSParitionerAccess().getGroup(), "rule__JSParitioner__Group__0");
					put(grammarAccess.getJSDamagerAccess().getGroup(), "rule__JSDamager__Group__0");
					put(grammarAccess.getRuleDamagerAccess().getGroup(), "rule__RuleDamager__Group__0");
					put(grammarAccess.getScannerTokenAccess().getGroup(), "rule__ScannerToken__Group__0");
					put(grammarAccess.getKeywordGroupAccess().getGroup(), "rule__KeywordGroup__Group__0");
					put(grammarAccess.getKeywordGroupAccess().getGroup_4(), "rule__KeywordGroup__Group_4__0");
					put(grammarAccess.getKeywordAccess().getGroup(), "rule__Keyword__Group__0");
					put(grammarAccess.getKeywordAccess().getGroup_1(), "rule__Keyword__Group_1__0");
					put(grammarAccess.getScannerSingleLineRuleAccess().getGroup(), "rule__ScannerSingleLineRule__Group__0");
					put(grammarAccess.getScannerSingleLineRuleAccess().getGroup_5(), "rule__ScannerSingleLineRule__Group_5__0");
					put(grammarAccess.getPartitionSingleLineRuleAccess().getGroup(), "rule__PartitionSingleLineRule__Group__0");
					put(grammarAccess.getPartitionSingleLineRuleAccess().getGroup_5(), "rule__PartitionSingleLineRule__Group_5__0");
					put(grammarAccess.getScannerMultiLineRuleAccess().getGroup(), "rule__ScannerMultiLineRule__Group__0");
					put(grammarAccess.getScannerMultiLineRuleAccess().getGroup_5(), "rule__ScannerMultiLineRule__Group_5__0");
					put(grammarAccess.getPartitionMultiLineRuleAccess().getGroup(), "rule__PartitionMultiLineRule__Group__0");
					put(grammarAccess.getPartitionMultiLineRuleAccess().getGroup_5(), "rule__PartitionMultiLineRule__Group_5__0");
					put(grammarAccess.getScannerCharacterRuleAccess().getGroup(), "rule__ScannerCharacterRule__Group__0");
					put(grammarAccess.getScannerCharacterRuleAccess().getGroup_4(), "rule__ScannerCharacterRule__Group_4__0");
					put(grammarAccess.getScannerJSRuleAccess().getGroup(), "rule__ScannerJSRule__Group__0");
					put(grammarAccess.getPartitionJSRuleAccess().getGroup(), "rule__PartitionJSRule__Group__0");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getGroup(), "rule__ScannerWhitespaceRule__Group__0");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getGroup_2_0(), "rule__ScannerWhitespaceRule__Group_2_0__0");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getGroup_2_0_2(), "rule__ScannerWhitespaceRule__Group_2_0_2__0");
					put(grammarAccess.getRGBColorAccess().getGroup(), "rule__RGBColor__Group__0");
					put(grammarAccess.getFontAccess().getGroup(), "rule__Font__Group__0");
					put(grammarAccess.getModelAccess().getNameAssignment_0(), "rule__Model__NameAssignment_0");
					put(grammarAccess.getModelAccess().getPartitionsAssignment_2(), "rule__Model__PartitionsAssignment_2");
					put(grammarAccess.getModelAccess().getDamagersAssignment_3(), "rule__Model__DamagersAssignment_3");
					put(grammarAccess.getModelAccess().getPartitionerAssignment_4(), "rule__Model__PartitionerAssignment_4");
					put(grammarAccess.getModelAccess().getContentTypesAssignment_7(), "rule__Model__ContentTypesAssignment_7");
					put(grammarAccess.getPartitionAccess().getNameAssignment_1(), "rule__Partition__NameAssignment_1");
					put(grammarAccess.getJavaLikeParitionerAccess().getSingleLineDocParitionAssignment_3(), "rule__JavaLikeParitioner__SingleLineDocParitionAssignment_3");
					put(grammarAccess.getJavaLikeParitionerAccess().getMultiLineDocParitionAssignment_5(), "rule__JavaLikeParitioner__MultiLineDocParitionAssignment_5");
					put(grammarAccess.getJavaLikeParitionerAccess().getJavaDocParitionAssignment_7(), "rule__JavaLikeParitioner__JavaDocParitionAssignment_7");
					put(grammarAccess.getJavaLikeParitionerAccess().getCharacterParitionAssignment_9(), "rule__JavaLikeParitioner__CharacterParitionAssignment_9");
					put(grammarAccess.getJavaLikeParitionerAccess().getStringParitionAssignment_11(), "rule__JavaLikeParitioner__StringParitionAssignment_11");
					put(grammarAccess.getRulePartitionerAccess().getRulesAssignment_2(), "rule__RulePartitioner__RulesAssignment_2");
					put(grammarAccess.getJSParitionerAccess().getFileURIAssignment_1(), "rule__JSParitioner__FileURIAssignment_1");
					put(grammarAccess.getJSDamagerAccess().getPartitionAssignment_1(), "rule__JSDamager__PartitionAssignment_1");
					put(grammarAccess.getJSDamagerAccess().getFileURIAssignment_2(), "rule__JSDamager__FileURIAssignment_2");
					put(grammarAccess.getRuleDamagerAccess().getPartitionAssignment_1(), "rule__RuleDamager__PartitionAssignment_1");
					put(grammarAccess.getRuleDamagerAccess().getTokensAssignment_3(), "rule__RuleDamager__TokensAssignment_3");
					put(grammarAccess.getRuleDamagerAccess().getKeywordGroupsAssignment_4(), "rule__RuleDamager__KeywordGroupsAssignment_4");
					put(grammarAccess.getRuleDamagerAccess().getRulesAssignment_5(), "rule__RuleDamager__RulesAssignment_5");
					put(grammarAccess.getScannerTokenAccess().getDefaultAssignment_0(), "rule__ScannerToken__DefaultAssignment_0");
					put(grammarAccess.getScannerTokenAccess().getNameAssignment_2(), "rule__ScannerToken__NameAssignment_2");
					put(grammarAccess.getKeywordGroupAccess().getTokenAssignment_1(), "rule__KeywordGroup__TokenAssignment_1");
					put(grammarAccess.getKeywordGroupAccess().getKeywordsAssignment_3(), "rule__KeywordGroup__KeywordsAssignment_3");
					put(grammarAccess.getKeywordGroupAccess().getKeywordsAssignment_4_1(), "rule__KeywordGroup__KeywordsAssignment_4_1");
					put(grammarAccess.getKeywordAccess().getNameAssignment_0(), "rule__Keyword__NameAssignment_0");
					put(grammarAccess.getKeywordAccess().getVersionAssignment_1_1(), "rule__Keyword__VersionAssignment_1_1");
					put(grammarAccess.getScannerSingleLineRuleAccess().getTokenAssignment_1(), "rule__ScannerSingleLineRule__TokenAssignment_1");
					put(grammarAccess.getScannerSingleLineRuleAccess().getStartSeqAssignment_2(), "rule__ScannerSingleLineRule__StartSeqAssignment_2");
					put(grammarAccess.getScannerSingleLineRuleAccess().getEndSeqAssignment_4(), "rule__ScannerSingleLineRule__EndSeqAssignment_4");
					put(grammarAccess.getScannerSingleLineRuleAccess().getEscapeSeqAssignment_5_2(), "rule__ScannerSingleLineRule__EscapeSeqAssignment_5_2");
					put(grammarAccess.getPartitionSingleLineRuleAccess().getParitionAssignment_1(), "rule__PartitionSingleLineRule__ParitionAssignment_1");
					put(grammarAccess.getPartitionSingleLineRuleAccess().getStartSeqAssignment_2(), "rule__PartitionSingleLineRule__StartSeqAssignment_2");
					put(grammarAccess.getPartitionSingleLineRuleAccess().getEndSeqAssignment_4(), "rule__PartitionSingleLineRule__EndSeqAssignment_4");
					put(grammarAccess.getPartitionSingleLineRuleAccess().getEscapeSeqAssignment_5_2(), "rule__PartitionSingleLineRule__EscapeSeqAssignment_5_2");
					put(grammarAccess.getScannerMultiLineRuleAccess().getTokenAssignment_1(), "rule__ScannerMultiLineRule__TokenAssignment_1");
					put(grammarAccess.getScannerMultiLineRuleAccess().getStartSeqAssignment_2(), "rule__ScannerMultiLineRule__StartSeqAssignment_2");
					put(grammarAccess.getScannerMultiLineRuleAccess().getEndSeqAssignment_4(), "rule__ScannerMultiLineRule__EndSeqAssignment_4");
					put(grammarAccess.getScannerMultiLineRuleAccess().getEscapeSeqAssignment_5_2(), "rule__ScannerMultiLineRule__EscapeSeqAssignment_5_2");
					put(grammarAccess.getPartitionMultiLineRuleAccess().getParitionAssignment_1(), "rule__PartitionMultiLineRule__ParitionAssignment_1");
					put(grammarAccess.getPartitionMultiLineRuleAccess().getStartSeqAssignment_2(), "rule__PartitionMultiLineRule__StartSeqAssignment_2");
					put(grammarAccess.getPartitionMultiLineRuleAccess().getEndSeqAssignment_4(), "rule__PartitionMultiLineRule__EndSeqAssignment_4");
					put(grammarAccess.getPartitionMultiLineRuleAccess().getEscapeSeqAssignment_5_2(), "rule__PartitionMultiLineRule__EscapeSeqAssignment_5_2");
					put(grammarAccess.getScannerCharacterRuleAccess().getTokenAssignment_1(), "rule__ScannerCharacterRule__TokenAssignment_1");
					put(grammarAccess.getScannerCharacterRuleAccess().getCharactersAssignment_3(), "rule__ScannerCharacterRule__CharactersAssignment_3");
					put(grammarAccess.getScannerCharacterRuleAccess().getCharactersAssignment_4_1(), "rule__ScannerCharacterRule__CharactersAssignment_4_1");
					put(grammarAccess.getScannerJSRuleAccess().getTokenAssignment_1(), "rule__ScannerJSRule__TokenAssignment_1");
					put(grammarAccess.getScannerJSRuleAccess().getFileURIAssignment_2(), "rule__ScannerJSRule__FileURIAssignment_2");
					put(grammarAccess.getPartitionJSRuleAccess().getTokenAssignment_1(), "rule__PartitionJSRule__TokenAssignment_1");
					put(grammarAccess.getPartitionJSRuleAccess().getFileURIAssignment_2(), "rule__PartitionJSRule__FileURIAssignment_2");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getTokenAssignment_1(), "rule__ScannerWhitespaceRule__TokenAssignment_1");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getCharactersAssignment_2_0_1(), "rule__ScannerWhitespaceRule__CharactersAssignment_2_0_1");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getCharactersAssignment_2_0_2_1(), "rule__ScannerWhitespaceRule__CharactersAssignment_2_0_2_1");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getJavawhitespaceAssignment_2_1(), "rule__ScannerWhitespaceRule__JavawhitespaceAssignment_2_1");
					put(grammarAccess.getScannerWhitespaceRuleAccess().getFileURIAssignment_2_2(), "rule__ScannerWhitespaceRule__FileURIAssignment_2_2");
					put(grammarAccess.getRGBColorAccess().getRAssignment_2(), "rule__RGBColor__RAssignment_2");
					put(grammarAccess.getRGBColorAccess().getGAssignment_4(), "rule__RGBColor__GAssignment_4");
					put(grammarAccess.getRGBColorAccess().getBAssignment_6(), "rule__RGBColor__BAssignment_6");
					put(grammarAccess.getFontAccess().getNameAssignment_0(), "rule__Font__NameAssignment_0");
					put(grammarAccess.getFontAccess().getSizeAssignment_1(), "rule__Font__SizeAssignment_1");
					put(grammarAccess.getFontAccess().getAttributesAssignment_2(), "rule__Font__AttributesAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.fx.code.compensator.hsl.ui.contentassist.antlr.internal.InternalHSLParser typedParser = (org.eclipse.fx.code.compensator.hsl.ui.contentassist.antlr.internal.InternalHSLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public HSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(HSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
